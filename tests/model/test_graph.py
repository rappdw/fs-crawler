from fscrawler.model.graph import determine_edge_condition, EdgeConditions
import pytest


def test_truth_table(relationship_truth_table):
    values = [False, True]
    expected = relationship_truth_table
    for p in values:
        for q in values:
            for r in values:
                for s in values:
                    for t in values:
                        for u in values:
                            for v in values:
                                try:
                                    w = determine_edge_condition(p, q, r, s, t, u, v)
                                except ValueError:
                                    w = 'x'
                                if w == EdgeConditions.writeable:
                                    assert expected[(p, q, r, s, t, u, v)] == 1
                                elif w == EdgeConditions.invalid_state:
                                    assert expected[(p, q, r, s, t, u, v)] == 'x'
                                else:
                                    assert expected[(p, q, r, s, t, u, v)] == 0


@pytest.fixture
def relationship_truth_table():
    return {
        (0, 0, 0, 0, 0, 0, 0): 1,
        (0, 0, 0, 0, 0, 0, 1): 1,
        (0, 0, 0, 0, 0, 1, 0): 1,
        (0, 0, 0, 0, 0, 1, 1): 1,
        (0, 0, 0, 0, 1, 0, 0): 1,
        (0, 0, 0, 0, 1, 0, 1): 1,
        (0, 0, 0, 0, 1, 1, 0): 1,
        (0, 0, 0, 0, 1, 1, 1): 1,
        (0, 0, 0, 1, 0, 0, 0): 0,
        (0, 0, 0, 1, 0, 0, 1): 1,
        (0, 0, 0, 1, 0, 1, 0): 0,
        (0, 0, 0, 1, 0, 1, 1): 1,
        (0, 0, 0, 1, 1, 0, 0): 0,
        (0, 0, 0, 1, 1, 0, 1): 1,
        (0, 0, 0, 1, 1, 1, 0): 0,
        (0, 0, 0, 1, 1, 1, 1): 1,
        (0, 0, 1, 0, 0, 0, 0): 0,
        (0, 0, 1, 0, 0, 0, 1): 0,
        (0, 0, 1, 0, 0, 1, 0): 0,
        (0, 0, 1, 0, 0, 1, 1): 0,
        (0, 0, 1, 0, 1, 0, 0): 0,
        (0, 0, 1, 0, 1, 0, 1): 1,
        (0, 0, 1, 0, 1, 1, 0): 0,
        (0, 0, 1, 0, 1, 1, 1): 1,
        (0, 0, 1, 1, 0, 0, 0): 0,
        (0, 0, 1, 1, 0, 0, 1): 0,
        (0, 0, 1, 1, 0, 1, 0): 0,
        (0, 0, 1, 1, 0, 1, 1): 0,
        (0, 0, 1, 1, 1, 0, 0): 0,
        (0, 0, 1, 1, 1, 0, 1): 1,
        (0, 0, 1, 1, 1, 1, 0): 0,
        (0, 0, 1, 1, 1, 1, 1): 1,
        (0, 1, 0, 0, 0, 0, 0): 0,
        (0, 1, 0, 0, 0, 0, 1): 0,
        (0, 1, 0, 0, 0, 1, 0): 1,
        (0, 1, 0, 0, 0, 1, 1): 1,
        (0, 1, 0, 0, 1, 0, 0): 0,
        (0, 1, 0, 0, 1, 0, 1): 0,
        (0, 1, 0, 0, 1, 1, 0): 1,
        (0, 1, 0, 0, 1, 1, 1): 1,
        (0, 1, 0, 1, 0, 0, 0): 'x',
        (0, 1, 0, 1, 0, 0, 1): 'x',
        (0, 1, 0, 1, 0, 1, 0): 'x',
        (0, 1, 0, 1, 0, 1, 1): 'x',
        (0, 1, 0, 1, 1, 0, 0): 'x',
        (0, 1, 0, 1, 1, 0, 1): 'x',
        (0, 1, 0, 1, 1, 1, 0): 'x',
        (0, 1, 0, 1, 1, 1, 1): 'x',
        (0, 1, 1, 0, 0, 0, 0): 0,
        (0, 1, 1, 0, 0, 0, 1): 0,
        (0, 1, 1, 0, 0, 1, 0): 0,
        (0, 1, 1, 0, 0, 1, 1): 0,
        (0, 1, 1, 0, 1, 0, 0): 0,
        (0, 1, 1, 0, 1, 0, 1): 0,
        (0, 1, 1, 0, 1, 1, 0): 0,
        (0, 1, 1, 0, 1, 1, 1): 1,
        (0, 1, 1, 1, 0, 0, 0): 'x',
        (0, 1, 1, 1, 0, 0, 1): 'x',
        (0, 1, 1, 1, 0, 1, 0): 'x',
        (0, 1, 1, 1, 0, 1, 1): 'x',
        (0, 1, 1, 1, 1, 0, 0): 'x',
        (0, 1, 1, 1, 1, 0, 1): 'x',
        (0, 1, 1, 1, 1, 1, 0): 'x',
        (0, 1, 1, 1, 1, 1, 1): 'x',
        (1, 0, 0, 0, 0, 0, 0): 0,
        (1, 0, 0, 0, 0, 0, 1): 0,
        (1, 0, 0, 0, 0, 1, 0): 1,
        (1, 0, 0, 0, 0, 1, 1): 1,
        (1, 0, 0, 0, 1, 0, 0): 0,
        (1, 0, 0, 0, 1, 0, 1): 0,
        (1, 0, 0, 0, 1, 1, 0): 1,
        (1, 0, 0, 0, 1, 1, 1): 1,
        (1, 0, 0, 1, 0, 0, 0): 0,
        (1, 0, 0, 1, 0, 0, 1): 0,
        (1, 0, 0, 1, 0, 1, 0): 0,
        (1, 0, 0, 1, 0, 1, 1): 1,
        (1, 0, 0, 1, 1, 0, 0): 0,
        (1, 0, 0, 1, 1, 0, 1): 0,
        (1, 0, 0, 1, 1, 1, 0): 0,
        (1, 0, 0, 1, 1, 1, 1): 1,
        (1, 0, 1, 0, 0, 0, 0): 'x',
        (1, 0, 1, 0, 0, 0, 1): 'x',
        (1, 0, 1, 0, 0, 1, 0): 'x',
        (1, 0, 1, 0, 0, 1, 1): 'x',
        (1, 0, 1, 0, 1, 0, 0): 'x',
        (1, 0, 1, 0, 1, 0, 1): 'x',
        (1, 0, 1, 0, 1, 1, 0): 'x',
        (1, 0, 1, 0, 1, 1, 1): 'x',
        (1, 0, 1, 1, 0, 0, 0): 'x',
        (1, 0, 1, 1, 0, 0, 1): 'x',
        (1, 0, 1, 1, 0, 1, 0): 'x',
        (1, 0, 1, 1, 0, 1, 1): 'x',
        (1, 0, 1, 1, 1, 0, 0): 'x',
        (1, 0, 1, 1, 1, 0, 1): 'x',
        (1, 0, 1, 1, 1, 1, 0): 'x',
        (1, 0, 1, 1, 1, 1, 1): 'x',
        (1, 1, 0, 0, 0, 0, 0): 0,
        (1, 1, 0, 0, 0, 0, 1): 0,
        (1, 1, 0, 0, 0, 1, 0): 1,
        (1, 1, 0, 0, 0, 1, 1): 1,
        (1, 1, 0, 0, 1, 0, 0): 0,
        (1, 1, 0, 0, 1, 0, 1): 0,
        (1, 1, 0, 0, 1, 1, 0): 1,
        (1, 1, 0, 0, 1, 1, 1): 1,
        (1, 1, 0, 1, 0, 0, 0): 'x',
        (1, 1, 0, 1, 0, 0, 1): 'x',
        (1, 1, 0, 1, 0, 1, 0): 'x',
        (1, 1, 0, 1, 0, 1, 1): 'x',
        (1, 1, 0, 1, 1, 0, 0): 'x',
        (1, 1, 0, 1, 1, 0, 1): 'x',
        (1, 1, 0, 1, 1, 1, 0): 'x',
        (1, 1, 0, 1, 1, 1, 1): 'x',
        (1, 1, 1, 0, 0, 0, 0): 'x',
        (1, 1, 1, 0, 0, 0, 1): 'x',
        (1, 1, 1, 0, 0, 1, 0): 'x',
        (1, 1, 1, 0, 0, 1, 1): 'x',
        (1, 1, 1, 0, 1, 0, 0): 'x',
        (1, 1, 1, 0, 1, 0, 1): 'x',
        (1, 1, 1, 0, 1, 1, 0): 'x',
        (1, 1, 1, 0, 1, 1, 1): 'x',
        (1, 1, 1, 1, 0, 0, 0): 'x',
        (1, 1, 1, 1, 0, 0, 1): 'x',
        (1, 1, 1, 1, 0, 1, 0): 'x',
        (1, 1, 1, 1, 0, 1, 1): 'x',
        (1, 1, 1, 1, 1, 0, 0): 'x',
        (1, 1, 1, 1, 1, 0, 1): 'x',
        (1, 1, 1, 1, 1, 1, 0): 'x',
        (1, 1, 1, 1, 1, 1, 1): 'x',
    }
